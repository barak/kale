Automatically generated by Mendeley Desktop 1.19.4
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Preferences -> BibTeX in Mendeley Desktop

@misc{React,
author = {Facebook},
title = {{React â€“ A JavaScript library for building user interfaces}},
url = {https://reactjs.org/}
}
@misc{github-pr-styled-components,
keywords = {Contributon},
mendeley-tags = {Contributon},
title = {{Update styled-components to 5.0 by mgoszcz2 {\textperiodcentered} Pull Request {\#}42415 {\textperiodcentered} DefinitelyTyped/DefinitelyTyped}},
url = {https://github.com/DefinitelyTyped/DefinitelyTyped/pull/42415},
urldate = {2020-04-07}
}
@article{Gross2005,
abstract = {Educators have developed a myriad of tools to help novices learn to program. Unfortunately, too little is known about the educational impact of these environments, or even how to assess this impact. In this paper we summarize a representative collection of the assessments of novice programming environments, present a rubric for evaluating the quality of such assessments, and demonstrate the application of our rubric to the summarized works. The intent is that such an evaluative framework will help inform future efforts in assessing novice programming environments. Copyright 2005 ACM.},
annote = {Not super useful right now. Maybe if I add an evaulation},
author = {Gross, Paul and Powers, Kris},
doi = {10.1145/1089786.1089796},
file = {:Users/maciej/Home/Temp/1089786.1089796.pdf:pdf},
isbn = {1595930434},
journal = {Proceedings of the 1st International Computing Education Research Workshop, ICER 2005},
keywords = {Assessment,Evaluation,Handy,Novice Programmers,Novice Programming Environments},
mendeley-tags = {Handy},
pages = {99--110},
title = {{Evaluating assessments of novice programming environments}},
year = {2005}
}
@inproceedings{Chodarev2016,
abstract = {Interactive user interfaces include commands that allow to manipulate data or other objects. While in most cases these commands are atomic, it is possible to support composition of simple command elements into complex commands directly during the user interaction. In this case commands have properties of a language. Prominent example of such interface is the Vim text editor. In this paper properties of this user interfaces design pattern are explored and compared with usual interfaces. The ways to integrate this approach with modern interfaces are also proposed.},
annote = {Really good},
author = {Chodarev, Sergej},
booktitle = {2015 IEEE 13th International Scientific Conference on Informatics, INFORMATICS 2015 - Proceedings},
doi = {10.1109/Informatics.2015.7377819},
file = {:Users/maciej/Library/Application Support/Mendeley Desktop/Downloaded/Chodarev - 2016 - Commands composition user interface pattern.pdf:pdf},
isbn = {9781467398688},
keywords = {Keybindings},
mendeley-tags = {Keybindings},
month = {jan},
pages = {120--123},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Commands composition user interface pattern}},
year = {2016}
}
@article{Denny2011,
abstract = {Mastering syntax is one of the earliest challenges facing the novice programmer. Problem solving and algorithms are the focus of many first year programming classes, leaving students to learn syntax on their own while they practice writing code. In this paper we investigate the frequency with which students encounter syntax errors during a drill and practice activity. We find that students struggle with syntax to a greater extent than we anticipated, even when writing short fragments of code. {\textcopyright} 2011 ACM.},
author = {Denny, Paul and Luxton-Reilly, Andrew and Tempero, Ewan and Hendrickx, Jacob},
doi = {10.1145/1999747.1999807},
file = {:Users/maciej/Home/Temp/1999747.1999807.pdf:pdf},
isbn = {9781450308878},
journal = {ITiCSE'11 - Proceedings of the 16th Annual Conference on Innovation and Technology in Computer Science},
keywords = {Meta,Syntax,assessment,codewrite,constructive evaluation,drill and practice,java,student-generated exercises,syntax},
mendeley-tags = {Meta,Syntax},
pages = {208--212},
title = {{Understanding the syntax barrier for novices}},
year = {2011}
}
@article{Kelleher2005,
abstract = {Since the early 1960s, researchers have built a number of programming languages and environments with the intention of making programming accessible to a larger number of people. This article presents a taxonomy of languages and environments designed to make programming more accessible to novice programmers of all ages. The systems are organized by their primary goal, either to teach programming or to use programming to empower their users, and then, by each systems authors approach, to making learning to program easier for novice programmers. The article explains all categories in the taxonomy, provides a brief description of the systems in each category, and suggests some avenues for future work in novice programming environments and languages.},
author = {Kelleher, Caitlin and Pausch, Randy},
doi = {10.1145/1089733.1089734},
file = {:Users/maciej/Home/Temp/NoviceProgSurvey.pdf:pdf},
issn = {0360-0300},
journal = {ACM Computing Surveys (CSUR)},
keywords = {Meta},
mendeley-tags = {Meta},
number = {2},
pages = {83--137},
title = {{Lowering the Barriers to Programming: a survey of programming environments and languages for novice programmers}},
volume = {37},
year = {2005}
}
@article{Beldie1983,
abstract = {The efficiency of two character sets to be used on television screens was evaluated. Subjects performed various tasks (reading, error identification, line finding) with each of the two character sets. The text was presented using dot-matrix characters having either a fixed matrix size or a variable width. The variable-matrix character design resulted in significantly improved efficiency in two of the three tasks, and this character design is recommended for use on television screens.},
author = {Beldie, Ion P. and Pastoor, Siegmund and Schwarz, Elmar},
doi = {10.1177/001872088302500303},
file = {:Users/maciej/Home/Temp/beldie1983.pdf:pdf},
issn = {00187208},
journal = {Human Factors},
keywords = {Font},
mendeley-tags = {Font},
title = {{Fixed versus Variable Letter Width for Televised Text}},
year = {1983}
}
@misc{github-pr-popmotion,
keywords = {Contributon},
mendeley-tags = {Contributon},
title = {{Add support for the rrggbbaa hex color notation by mgoszcz2 {\textperiodcentered} Pull Request {\#}868 {\textperiodcentered} Popmotion/popmotion}},
url = {https://github.com/Popmotion/popmotion/pull/868},
urldate = {2020-04-07}
}
@article{Campbell1981,
abstract = {Three computer text-processing techniques were compared. The first was typescript without right justification. The other two involved right-justified text. The first (and the most common) right-justification technique involved calculating the space from the right margin to the end of a line of text in blank-character units and distributing the space in whole-character units between the words on that line. The second right- justification technique distributed the extra space at the end of a line proportionally both between and within the words forming the line. Each subject read the same passage prepared with one of the techniques and answered a short questionnaire concerning the material in the passage. Measurements of reading time showed that the variable-spacing right-justification technique improved reading speed in relation both to the text with an unjustified right margin and to the text with the right-justified margin produced by blank insertion. {\textcopyright} 1981 Taylor {\&} Francis Group, LLC.},
author = {Campbell, A. J. and Marchhtti, F. M. and Mewhort, D. J.},
doi = {10.1080/00140138108924885},
file = {:Users/maciej/Home/Temp/campbell1981.pdf:pdf},
issn = {13665847},
journal = {Ergonomics},
keywords = {Font},
mendeley-tags = {Font},
title = {{Reading speed and text production a note on right-justification techniques}},
year = {1981}
}
@inproceedings{DuBoulay1992,
annote = {This was quoted by the Scratch ACM article, talking about the floor/ceiling/walls triplet, but doesn't seem to contain a reference to it.

Intresting talk how Logo PL became associated with turtle graphics (despite being capable of more than that)},
author = {du Boulay, Benedict},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-662-11334-9_12},
file = {:Users/maciej/Home/Temp/novice-envs2.pdf:pdf},
isbn = {9783540556060},
issn = {16113349},
keywords = {Meta},
mendeley-tags = {Meta},
title = {{Programming environments for novices}},
year = {1992}
}
@misc{Typescript,
author = {Microsoft},
title = {{TypeScript - JavaScript that scales.}},
url = {https://www.typescriptlang.org/}
}
